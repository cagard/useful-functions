emptyCol<-function(column){
NAS<-apply(column,2,function(x) sum(is.na(x))/length(x))#number of NA values
NAS<-which(NAS==1)
NAnames<-grep(pattern = "NA.",x = names(column),ignore.case = T)
result<-intersect(NAS,NAnames)
if(length(result)==0){
return(1:length(column))
}else{
return(-result)
}
}
mydata_trim<-lapply(mydata,function(x) x[,emptyCol(x)])
print(lapply(mydata_trim,names))
for(i in 1:length(mydata)){ #change all colnames to lowercase
names(mydata_trim[[i]])<-tolower(names(mydata_trim[[i]]))
}
rxl<-lapply(mydata_trim,function(x) grep(pattern = "rtl", x = names(x),ignore.case = T))
for(i in 1:length(rxl)){
names(mydata_trim[[i]])[rxl[[i]]]<-"rxl"
}
tl<-lapply(mydata_trim,function(x) grep(pattern = "tl", x = names(x),ignore.case = T))
for(i in 1:length(tl)){
names(mydata_trim[[i]])[tl[[i]]]<-"tl"
}
for(i in 1:length(mydata_trim)){
names(mydata_trim[[i]])[which(names(mydata_trim[[i]])=="rxl")]<-"rtl"
}
keepnames<-c("species", "toes","date","sex","svl","mass","paint.mark","location","meters","new.recap","vial","painted","misc")
tl_rtl<-"tl|rtl"
#removed "tl" and "rtl" from this b/c they were treated earlier and including them here changes them all to "tl".
p.keepnames<-c()
for(name in keepnames){p.keepnames<-paste(p.keepnames,name,"|",sep = "")}
p.keepnames<-substr(p.keepnames,1,nchar(p.keepnames)-1) #removes trailing "|".
rawnames<-lapply(mydata_trim,names)#original names for each year's data
mydata_vars<-list()#will eventually only contain columns with variable names that can be kept or fixed
droppedvar<-list() #Will eventually only contain variables dropped from mydata to create mydata_goodNames
for(i in 1:length(rawnames)){
for(j in 1:length(rawnames[[i]])){
if(length(grep(pattern = "tl|rtl",x=rawnames[[i]][j]))>0){
next()
}
if(length(grep(pattern = p.keepnames,x=rawnames[[i]][j])>0)){
for(name in keepnames){
if(length(grep(pattern= name,x=rawnames[[i]][j]))>0){
rawnames[[i]][j]<-name
}
}
}else{
rawnames[[i]][j]<-"DROP"
}
}
droppedvar[[i]]<-mydata_trim[[i]][,which(rawnames[[i]]=="DROP")]#creates new list with dropped variables
names(droppedvar[[i]])<-rawnames[[i]][which(rawnames[[i]]=="DROP")]#attaches names to droppedvar
mydata_vars[[i]]<-mydata_trim[[i]][,which(rawnames[[i]]!="DROP")]#creates new list with kept variables
names(mydata_vars[[i]])<-rawnames[[i]][which(rawnames[[i]]!="DROP")]#attaches mapped names to mydata_vars
}
myxls=list.files(path = "C:/Users/test/Documents/Chris/Research/Sceloporus/Caudal Autotomy/Demography/excelFiles",pattern="x.xls")
myyears<-strsplit(x=myxls,split = "xCC|x.xls")#creates a vector of the years for the data
myyears<-sapply(myyears,function(x) x[2])
#creates a variable, year, in each sublist of mydata_vars and populates it with the appropriate year from myyears
for(i in 1:length(mydata_vars)){
mydata_vars[[i]][,"year"]<-myyears[i]
}
forceChar<-function(x){
if(is.data.frame(x)==T){
apply(x,2,as.character)
}else{
as.character(x)
}
}
mydata_vars<-lapply(mydata_vars,forceChar)
mycombfile<-data.frame()
for(i in 1:length(mydata_vars)){
mycombfile<-rbind(mycombfile,mydata_vars[[i]])
}
lowerCols<-grep("sex|species|painted|new.recap|toes",names(mycombfile))
for(col in lowerCols){
mycombfile[,col]<-tolower(mycombfile[,col])
}
trim <- function (x) gsub("^\\s+|\\s+$", "", x)# from Stackoverflow https://stackoverflow.com/questions/2261079/how-to-trim-leading-and-trailing-whitespace-in-r
names(mycombfile)[which(names(mycombfile)=="rtl")]<-"rtl_orig"
mycombfile$rtl<-as.numeric(as.character(trim(trim(mycombfile$rtl_orig))))
mycombfile[which(mycombfile$rtl==-1),"rtl"]<-0
mycombfile$autotomized<-logical(nrow(mycombfile))
mycombfile[which(!is.na(mycombfile$rtl_orig) & mycombfile$rtl_orig!="o" & mycombfile$rtl_orig!="0" & mycombfile$rtl_orig!=" 0"),"autotomized"]<-T #don't know why I have to explicitly exclude rtl_orig =" 0" after using trim function
unique(mycombfile[which(mycombfile$autotomized==T),"rtl_orig"])
#Resume Here
mycombfile$review_sex<-logical(nrow(mycombfile))
mycombfile[which(mycombfile$sex!="m" & mycombfile$sex!="f"),"review_sex"]<-T
mycombfile$review_species<-logical(nrow(mycombfile))
mycombfile[grep("\\?",mycombfile$species),"review_species"]<-T
# mycombfile[which(mycombfile$species=="sj"|mycombfile$species=="sv"|mycombfile$species=="v"|mycombfile$species=="j"),"review_species"]<-F
mycombfile$review_painted<-logical(nrow(mycombfile))
mycombfile[which(mycombfile$painted!="painted" & mycombfile$painted!="yes" & mycombfile$painted!="" & mycombfile$painted!="no"),"review_painted"]<-T#many of these seem to belong in notes column
mycombfile$review_new.recap<-logical(nrow(mycombfile))
mycombfile[which(mycombfile$new.recap!="new" & mycombfile$new.recap!="n" & mycombfile$new.recap!="recap" & mycombfile$painted!="r"),"review_new.recap"]<-T
mycombfile$review_rtl<-logical(nrow(mycombfile))
mycombfile[which(is.na(mycombfile$rtl) & !is.na(mycombfile$rtl_orig)),"review_rtl"]<-T
mycombfile$drop_species<-logical(nrow(mycombfile))
mycombfile[which((substr(mycombfile$species,1,1)!="v" & (substr(mycombfile$species,1,1)!="j")& (substr(mycombfile$species,1,1)!="s"))| (substr(mycombfile$species,1,2)=="sc")| (substr(mycombfile$species,1,2)=="sn")),"drop_species"]<-T
mycombfile[grep("\\?",mycombfile$species),"drop_species"]<-F
unique(mycombfile[which(mycombfile$drop_species==T),"species"])
mycombfile$drop_morphometrics<-logical(nrow(mycombfile))
mycombfile[which(is.na(mycombfile$species)|is.na(mycombfile$svl)|is.na(mycombfile$tl)|is.na(mycombfile$rtl_orig)|is.na(mycombfile$toes)),"drop_morphometrics"]<-T
#FIX THIS
length(is.na(mycombfile$svl))
head(mycombfile$svl)
table(unlist(lapply(mycombfile$svl,is.na)))
table(unlist(lapply(mycombfile$svl,function(x) x=="")))
foo<-mycombfile
foo<-mycombfile$svl
as.numeric(foo)
as.character(foo)
length(foo[which(as.character(foo)==""])
length(foo[which(as.character(foo)=="")])
foo[which(as.character(foo)=="")]<-NA
table(is.na(foo))
blank2na<-function(x){
x[which(as.character(x)=="")]<-NA
return(x)
}
foo<-c("",40,60)
blank2na(foo)
foo<-data.frame("bar"=c(1,"",3),stuffy=(c(1,4,9)))
blank2na(foo)
for (column in mycombfile){
column<-blank2na(column)
}
length(is.na(mycombfile$svl))
mycombfile<-data.frame()
for(i in 1:length(mydata_vars)){
mycombfile<-rbind(mycombfile,mydata_vars[[i]])
}
lowerCols<-grep("sex|species|painted|new.recap|toes",names(mycombfile))
for(col in lowerCols){
mycombfile[,col]<-tolower(mycombfile[,col])
}
rm(list=ls()) #clears the environment
# filefolder="G:/Lizard work for the road/excel files"
filefolder="C:/Users/test/Documents/Chris/Research/Sceloporus/Caudal Autotomy/Demography"
knitr::opts_knit$set(root.dir = normalizePath(filefolder))
#this is an option we have to use for RMD notebooks otherwise the wd is reset after each chunk is executed
#setwd(filefolder) #this can be used instead for a regular rscript
options(pkgType = "source")
mypackages=c("rio","ggplot2","stringr","tables","knitr","xlsx","rJava")
neededpackages=mypackages[which(!is.element(el=mypackages,set=installed.packages()))]
if(length(neededpackages>0)){
install.packages(neededpackages)
}else{
warning("All packages already installed")
}
lapply(mypackages,function(x) library(x,character.only = T))
myfiles<-list.files( path = "excelFiles",pattern = c(".xls",".xlsx"))
myfiles_path<-lapply(myfiles,function(x)paste("excelFiles",x,sep = "/"))
# mydata<-lapply(myfiles_path,function(x) read.xlsx2(x,sheetIndex = 1,colClasses = "character"))
mydata<-lapply(myfiles_path,function(x) read.xlsx2(x,sheetIndex = 1,colClasses = "character"))
emptyCol<-function(column){
NAS<-apply(column,2,function(x) sum(is.na(x))/length(x))#number of NA values
NAS<-which(NAS==1)
NAnames<-grep(pattern = "NA.",x = names(column),ignore.case = T)
result<-intersect(NAS,NAnames)
if(length(result)==0){
return(1:length(column))
}else{
return(-result)
}
}
mydata_trim<-lapply(mydata,function(x) x[,emptyCol(x)])
print(lapply(mydata_trim,names))
for(i in 1:length(mydata)){ #change all colnames to lowercase
names(mydata_trim[[i]])<-tolower(names(mydata_trim[[i]]))
}
rxl<-lapply(mydata_trim,function(x) grep(pattern = "rtl", x = names(x),ignore.case = T))
for(i in 1:length(rxl)){
names(mydata_trim[[i]])[rxl[[i]]]<-"rxl"
}
tl<-lapply(mydata_trim,function(x) grep(pattern = "tl", x = names(x),ignore.case = T))
for(i in 1:length(tl)){
names(mydata_trim[[i]])[tl[[i]]]<-"tl"
}
for(i in 1:length(mydata_trim)){
names(mydata_trim[[i]])[which(names(mydata_trim[[i]])=="rxl")]<-"rtl"
}
keepnames<-c("species", "toes","date","sex","svl","mass","paint.mark","location","meters","new.recap","vial","painted","misc")
tl_rtl<-"tl|rtl"
#removed "tl" and "rtl" from this b/c they were treated earlier and including them here changes them all to "tl".
p.keepnames<-c()
for(name in keepnames){p.keepnames<-paste(p.keepnames,name,"|",sep = "")}
p.keepnames<-substr(p.keepnames,1,nchar(p.keepnames)-1) #removes trailing "|".
rawnames<-lapply(mydata_trim,names)#original names for each year's data
mydata_vars<-list()#will eventually only contain columns with variable names that can be kept or fixed
droppedvar<-list() #Will eventually only contain variables dropped from mydata to create mydata_goodNames
for(i in 1:length(rawnames)){
for(j in 1:length(rawnames[[i]])){
if(length(grep(pattern = "tl|rtl",x=rawnames[[i]][j]))>0){
next()
}
if(length(grep(pattern = p.keepnames,x=rawnames[[i]][j])>0)){
for(name in keepnames){
if(length(grep(pattern= name,x=rawnames[[i]][j]))>0){
rawnames[[i]][j]<-name
}
}
}else{
rawnames[[i]][j]<-"DROP"
}
}
droppedvar[[i]]<-mydata_trim[[i]][,which(rawnames[[i]]=="DROP")]#creates new list with dropped variables
names(droppedvar[[i]])<-rawnames[[i]][which(rawnames[[i]]=="DROP")]#attaches names to droppedvar
mydata_vars[[i]]<-mydata_trim[[i]][,which(rawnames[[i]]!="DROP")]#creates new list with kept variables
names(mydata_vars[[i]])<-rawnames[[i]][which(rawnames[[i]]!="DROP")]#attaches mapped names to mydata_vars
}
myxls=list.files(path = "C:/Users/test/Documents/Chris/Research/Sceloporus/Caudal Autotomy/Demography/excelFiles",pattern="x.xls")
myyears<-strsplit(x=myxls,split = "xCC|x.xls")#creates a vector of the years for the data
myyears<-sapply(myyears,function(x) x[2])
#creates a variable, year, in each sublist of mydata_vars and populates it with the appropriate year from myyears
for(i in 1:length(mydata_vars)){
mydata_vars[[i]][,"year"]<-myyears[i]
}
forceChar<-function(x){
if(is.data.frame(x)==T){
apply(x,2,as.character)
}else{
as.character(x)
}
}
mydata_vars<-lapply(mydata_vars,forceChar)
mycombfile<-data.frame()
for(i in 1:length(mydata_vars)){
mycombfile<-rbind(mycombfile,mydata_vars[[i]])
}
lowerCols<-grep("sex|species|painted|new.recap|toes",names(mycombfile))
for(col in lowerCols){
mycombfile[,col]<-tolower(mycombfile[,col])
}
trim <- function (x) gsub("^\\s+|\\s+$", "", x)# from Stackoverflow https://stackoverflow.com/questions/2261079/how-to-trim-leading-and-trailing-whitespace-in-r
names(mycombfile)[which(names(mycombfile)=="rtl")]<-"rtl_orig"
mycombfile$rtl<-as.numeric(as.character(trim(trim(mycombfile$rtl_orig))))
mycombfile[which(mycombfile$rtl==-1),"rtl"]<-0
mycombfile$autotomized<-logical(nrow(mycombfile))
mycombfile[which(!is.na(mycombfile$rtl_orig) & mycombfile$rtl_orig!="o" & mycombfile$rtl_orig!="0" & mycombfile$rtl_orig!=" 0"),"autotomized"]<-T #don't know why I have to explicitly exclude rtl_orig =" 0" after using trim function
unique(mycombfile[which(mycombfile$autotomized==T),"rtl_orig"])
mycombfile$new.recap_orig<-mycombfile$new.recap
mycombfile$sighting<-rep(NA,nrow(mycombfile))
mycombfile[which(mycombfile$new.recap=="visual recapture" | mycombfile$new.recap=="sighting" | mycombfile$new.recap=="sighted"|mycombfile$sighing=="sighted"),"sighting"]<-"sighting"
mycombfile[which(mycombfile$sighting==T),"new.recap"]<-NA
blank2NA<-function(x){
x[which(as.character(x)=="")]<-NA
return(as.character(x))
}
mycombfile<-as.data.frame(sapply(mycombfile,blank2NA))
#Resume Here
#Make this into a more versatile function eventually
myfilters<-function(){
mycombfile$review_sex<-logical(nrow(mycombfile))
mycombfile[which((mycombfile$sex!="m" & mycombfile$sex!="f") & (mycombfile$forceFemale!=T & mycombfile$forceMale!=T)),"review_sex"]<-T
mycombfile$review_species<-logical(nrow(mycombfile))
mycombfile[grep("\\?",mycombfile$species),"review_species"]<-T
mycombfile$review_painted<-logical(nrow(mycombfile))
mycombfile[which(mycombfile$painted!="painted" & mycombfile$painted!="yes" & mycombfile$painted!="" & mycombfile$painted!="no"),"review_painted"]<-T
mycombfile$review_new.recap<-logical(nrow(mycombfile))
mycombfile[which(mycombfile$new.recap!="new" & mycombfile$new.recap!="n" & mycombfile$new.recap!="recap" & mycombfile$painted!="r"),"review_new.recap"]<-T
mycombfile$review_rtl<-logical(nrow(mycombfile))
mycombfile[which(is.na(mycombfile$rtl) & !is.na(mycombfile$rtl_orig)),"review_rtl"]<-T
return(mycombfile)
}
mycombfile<-myfilters()
#make this a proper function eventually
review.filters<-function(){
review_sex_values<-unique(mycombfile[which(mycombfile$review_sex==T),"sex"])
review_species_values<-unique(mycombfile[which(mycombfile$review_species==T),"species"])
review_painted_values<-unique(mycombfile[which(mycombfile$review_painted==T),"painted"])
review_new.recap_values<-unique(mycombfile[which(mycombfile$review_new.recap==T),"new.recap"])
review_rtl_values<-unique(mycombfile[which(mycombfile$review_rtl==T),"rtl_orig"])#fix this
review_sex_values<-data.frame("value"=unique(mycombfile[which(mycombfile$review_sex==T),"sex"]),"nchar"=nchar(as.character(review_sex_values)))
review_species_values<-data.frame("value"=unique(mycombfile[which(mycombfile$review_species==T),"species"]),"nchar"=nchar(as.character(review_species_values)))
review_painted_values<-data.frame("value"=unique(mycombfile[which(mycombfile$review_painted==T),"painted"]),"nchar"=nchar(as.character(review_painted_values)))
review_new.recap_values<-data.frame("value"=unique(mycombfile[which(mycombfile$review_new.recap==T),"new.recap"]),"nchar"=nchar(as.character(review_new.recap_values)))
review_rtl_values<-data.frame("value"=unique(mycombfile[which(mycombfile$review_rtl==T),"rtl"]),"nchar"=nchar(as.character(review_rtl_values)))
filter_review<-list("sex"=review_sex_values,"species"=review_species_values,"painted"=review_painted_values,"new.recap"=review_new.recap_values,"rtl"=review_rtl_values)
filter_review<-list("sex"=review_sex_values,"species"=review_species_values,"new.recap"=review_new.recap_values,"rtl"=review_rtl_values)
return(filter_review)
}
filter_review<-review.filters()
mycombfile$forceMale<-logical(nrow(mycombfile))
mycombfile[which(mycombfile$sex=="m "|mycombfile$sex=="male"),"forceMale"]<-T
mycombfile$forceFemale<-logical(nrow(mycombfile))
mycombfile[which(mycombfile$sex=="f "),"forceFemale"]<-T
mycombfile$forceRecap<-logical(nrow(mycombfile))
mycombfile[which(mycombfile$new.recap=="recap " | mycombfile$new.recap=="reecap" |mycombfile$new.recap=="recapq"| mycombfile$new.recap=="r"),"forceRecap"]<-T
mycombfile$forceNew<-logical(nrow(mycombfile))
mycombfile[which(mycombfile$new.recap=="new "),"forceNew"]<-T
#REsume here - apply the above filters to force changes ]
mycombfile$drop_species<-logical(nrow(mycombfile))
mycombfile[which((substr(mycombfile$species,1,1)!="v" & (substr(mycombfile$species,1,1)!="j")& (substr(mycombfile$species,1,1)!="s"))| (substr(mycombfile$species,1,2)=="sc")| (substr(mycombfile$species,1,2)=="sn")),"drop_species"]<-T
mycombfile[grep("\\?",mycombfile$species),"drop_species"]<-F
unique(mycombfile[which(mycombfile$drop_species==T),"species"])
mycombfile$drop_morphometrics<-logical(nrow(mycombfile))
mycombfile[which(is.na(mycombfile$species)|is.na(mycombfile$svl)|is.na(mycombfile$tl)|is.na(mycombfile$rtl_orig)|is.na(mycombfile$toes)),"drop_morphometrics"]<-T
#FIX THIS
write.xlsx2(mycombfile,"mapped data.xlsx",showNA=T)
# rm(list=ls()) #clears the environment
# filefolder="G:/Lizard work for the road/excel files"
filefolder="C:/Users/test/Documents/Chris/Research/Sceloporus/Caudal Autotomy/Demography"
knitr::opts_knit$set(root.dir = normalizePath(filefolder))
#this is an option we have to use for RMD notebooks otherwise the wd is reset after each chunk is executed
#setwd(filefolder) #this can be used instead for a regular rscript
# options(pkgType = "source")
mypackages=c("ggplot2","tables","knitr","xlsx","rJava")
neededpackages=mypackages[which(!is.element(el=mypackages,set=installed.packages()))]
if(length(neededpackages>0)){
install.packages(neededpackages)
}else{
warning("All packages already installed")
}
lapply(mypackages,function(x) library(x,character.only = T))
mdata<-read.xlsx2("mapped data.xlsx",sheetIndex = 1)
names(mdata)
str(mdata)
reviewdatafinal<-data.frame(mdata[which(((mdata$review_new.recap==T & mdata$forceNew==F & mdata$forceRecap==F)|mdata$review_rtl==T|(mdata$review_sex==T & mdata$forceFemale==F & mdata$forceMale==F)|mdata$review_species==T)&(mdata$drop_morphometrics==F & mdata$drop_species==F )),])
str(reviewdatafinal)
write.xlsx(reviewdatafinal,"finalreviewdata.xlsx")
salary<-101000
weekly<-salary/52
hourly<-weekly/40
hourly
require(stats);require(vars);require(foreign)
setwd("./Temple/")
dir()
require(stats);require(vars);require(foreign)
setwd("./Temple/SOAR 1111")
rm(list = ls())
require(stats);require(vars);require(foreign)
setwd("./Temple/SOAR 1111")
getwd()
setwd("./SOAR 1111/")
dir()
test<-read.dta(dir()[2])
require(stats);require(vars);require(readstata13)
myinstall<-function(mypackages=NULL){
neededpackages<-as.character(mypackages[which(!is.element(el=mypackages,set=installed.packages()))])
if(length(neededpackages>0)){
install.packages(neededpackages)
}else{
warning("All packages already installed")
}
lapply(mypackages,function(x) library(x,character.only = T))
}
myinstall(c("stats","readstata13"))
test<-read.dta13(dir()[2])
dir()[2]
test<-read.dta13("Exam 2 Key 2 data.dta")
test<-readstata13("Exam 2 Key 2 data.dta")
myinstall("stats")
setwd("./SOAR 1111/")
dir()
exam2data<-read.csv("E2FALL17.csv.csv")
names(exam2data)[which(names(exam2data)=="Section")]<-"soar"
exam2data<-read.csv("E2FALL17.csv")
names(exam2data)
names(exam2data)[which(names(exam2data)=="section")]<-"soar"
names(exam2data)
grep("X*.",names(exam2data))
grep("X*.",names(exam2data),value = T)
grep("x*.",names(exam2data),value = T)
grep("\\X*.",names(exam2data),value = T)
rm(list = ls())
myinstall<-function(mypackages=NULL){
neededpackages<-as.character(mypackages[which(!is.element(el=mypackages,set=installed.packages()))])
if(length(neededpackages>0)){
install.packages(neededpackages)
}else{
warning("All packages already installed")
}
lapply(mypackages,function(x) library(x,character.only = T))
}
myinstall("stats")
setwd("./SOAR 1111/")
dir()
dir()
exam2data<-read.csv("E2FALL17.csv")
names(exam2data)[which(names(exam2data)=="section")]<-"soar"
names(exam2data)
names(exam2data)[which(names(exam2data)=="Score")]<-"n.correct"
examdata[c(1:5),"soar"]
exam2data[c(1:5),"soar"]
source('~/GitHub/Grading/exam1script.R', echo=TRUE)
sec81<-which(exam2data[,"soar"]== 81)
sec76<-which(exam2data[,"soar"]== 76)
sec75<-which(exam2data[,"soar"]== 75)
exam2data<-read.csv("E2FALL17.csv")
names(exam2data)[which(names(exam2data)=="section")]<-"soar"
names(exam2data)
names(exam2data)[which(names(exam2data)=="Score")]<-"n.correct"
sec81<-which(exam2data[,"soar"]== 81)
sec76<-which(exam2data[,"soar"]== 76)
sec75<-which(exam2data[,"soar"]== 75)
sec72<-which(exam2data[,"soar"]== 72)
sectest<-which(is.na(exam2data[,"soar"]))
highAch<-which(exam2data$n.correct>(median(exam2data$n.correct,na.rm = T)+IQR(exam2data$n.correct,na.rm = T)/2))
names(exam2data)<-tolower(names(exam2data))
all.highach<-exam2data[highAch,"tuid"]
mysec.highach<-exam2data[intersect(highAch,sec81),"tuid"]
mine<-rep("not mine",nrow(exam2data));mine[sec81]<-"mine"
table(mine)
exam2data<-cbind(exam2data,mine)
exam2data$soar<-as.factor(exam2data$soar)
mysumstat<-function(x){
mysumresults<-list("mean"=mean(x,na.rm=T),
"sd"=sd(x,na.rm=T),
"median"=median(x,na.rm=T),
"IQR"=IQR(x,na.rm=T),
"n"= if(is.null(dim(x))){
length(x)
}
else{
nrow(x)
}
)
return(mysumresults)
}
classdata<-as.data.frame(cbind("full.class"=mysumstat(exam2data[,"n.correct"]),
"mysections"=mysumstat(exam2data[sec81,"n.correct"])
# "sec.73"=mysumstat(exam2data[sec73,"n.correct"]),
# "sec.74"=mysumstat(exam2data[sec74,"n.correct"]),
# "sec.75"=mysumstat(exam2data[sec75,"n.correct"]),
# "sec.82"=mysumstat(exam2data[sec82,"n.correct"])
))
highAchData<-as.data.frame(cbind("full.class"=mysumstat(exam2data[highAch,"n.correct"]),
"mysections"= mysumstat(exam2data[intersect(highAch,allsections),"n.correct"])
# "sec.73" = mysumstat(exam2data[intersect(highAch,sec73),"n.correct"]),
# "sec.74" = mysumstat(exam2data[intersect(highAch,sec74),"n.correct"]),
# "sec.75" = mysumstat(exam2data[intersect(highAch,sec75),"n.correct"]),
# "sec.82" = mysumstat(exam2data[intersect(highAch,sec82),"n.correct"])
))
classdata<-as.data.frame(cbind("full.class"=mysumstat(exam2data[,"n.correct"]),
"mysections"=mysumstat(exam2data[sec81,"n.correct"])
# "sec.73"=mysumstat(exam2data[sec73,"n.correct"]),
# "sec.74"=mysumstat(exam2data[sec74,"n.correct"]),
# "sec.75"=mysumstat(exam2data[sec75,"n.correct"]),
# "sec.82"=mysumstat(exam2data[sec82,"n.correct"])
))
highAchData<-as.data.frame(cbind("full.class"=mysumstat(exam2data[highAch,"n.correct"]),
"mysections"= mysumstat(exam2data[intersect(highAch,allsections),"n.correct"])
# "sec.73" = mysumstat(exam2data[intersect(highAch,sec73),"n.correct"]),
# "sec.74" = mysumstat(exam2data[intersect(highAch,sec74),"n.correct"]),
# "sec.75" = mysumstat(exam2data[intersect(highAch,sec75),"n.correct"]),
# "sec.82" = mysumstat(exam2data[intersect(highAch,sec82),"n.correct"])
))
highAchData<-as.data.frame(cbind("full.class"=mysumstat(exam2data[highAch,"n.correct"]),
"mysections"= mysumstat(exam2data[intersect(highAch,sec81),"n.correct"])
# "sec.73" = mysumstat(exam2data[intersect(highAch,sec73),"n.correct"]),
# "sec.74" = mysumstat(exam2data[intersect(highAch,sec74),"n.correct"]),
# "sec.75" = mysumstat(exam2data[intersect(highAch,sec75),"n.correct"]),
# "sec.82" = mysumstat(exam2data[intersect(highAch,sec82),"n.correct"])
))
highAchievers<-as.data.frame(exam2data[highAch,c("n.correct","soar","id")])
highAchievers<-as.data.frame(exam2data[highAch,c("n.correct","soar","tuid")])
highAchievers<-highAchievers[order(highAchievers[,"soar"]),]
"full"<-boxplot(n.correct~soar, exam2data, xlab= "SOAR Section", ylab= "Number Correct");abline(h=17)
"Mine vs. Not" <- boxplot(n.correct~mine, exam2data,xlab ="Mine vs. Not Mine", ylab = "Number Correct"); abline(h=17)
scores<-kruskal.test(formula=n.correct~mine,data=exam2data)
print(scores)
sec.scores<-kruskal.test(formula=n.correct~soar,data=exam2data)
print(sec.scores)
highdata<-exam2data[which(!is.na(exam2data[highAch,])),]
chisq.test(highdata[,"mine"]) #fix this
Top10sec.81<-c()
for(i in which(names(exam2data)=="item1"):which(names(exam2data)=="item27")){
Top10sec.81<-c(Top10sec.81,length(which(exam2data[sec81,i]!=exam2data[1,i])))
}
names(Top10sec.81)<-names(exam2data[,which(names(exam2data)=="item1"):which(names(exam2data)=="item27")])
Top10sec.81<-sort(Top10sec.81,decreasing = T)[1:10]
print(Top10sec.81)
foo<-c(1,2,2,2,3,3,4,4,4)
bar<-c(1,5,2,2,3,3,4,4,4)
table(foo)
max(table(foo))
class(table(foo))
max(table(foo))[,1]
dim(table(foo))
table(foo)[,,,4]
as.data.frame(table(foo))
as.data.frame(table(foo))[,1]
max(as.data.frame(table(foo)))[,1]
foodf<-as.data.frame(table(foo))
foodf[which(foodf$Freq==max(foodf$Freq),1)]
foodf[which(foodf$Freq==max(foodf$Freq)),1]
knitr::opts_chunk$set(echo = TRUE)
statMode<-function(x){
tmp<-as.data.frame(table(x))#store tabled frequencies of values as a dataframe with colnames *x* and *Freq*
mode<-tmp[which(tmp$Freq==max(tmp$Freq)),1]
return(mode)
}
foo<-c(1,2,2,2,3,NA,4,4,4)
foodf<-as.data.frame(table(foo))
foodf[which(foodf$Freq==max(foodf$Freq)),1]
stuffy<-1
is.numeric(1)
is.numeric(1.4)
is.integer(1)
as.integer(1)
stuffy<-as.integer(foo)
stuffy
is.integer(stuffy[1])
statMode(stuffy)
setwd("~/")
getwd()
source("~/GitHub/useful-functions/unsortedFunctions.Rmd")
setwd("~/GitHub/useful-functions")
source("unsortedFunctions.Rmd")
source(unsortedFunctions.Rmd)
